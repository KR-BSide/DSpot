{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Git\\\\DSpot\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _classCallCheck from\"C:\\\\Git\\\\DSpot\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Git\\\\DSpot\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Git\\\\DSpot\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Git\\\\DSpot\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Git\\\\DSpot\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';var map;var markers=[];var lotList=[];var latList=[];var subways=[];var totalList=[];var totalIndex=[];var Map=/*#__PURE__*/function(_Component){_inherits(Map,_Component);function Map(){var _getPrototypeOf2;var _this;_classCallCheck(this,Map);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Map)).call.apply(_getPrototypeOf2,[this].concat(args)));_this._getMap=function(){map=new window.Tmapv2.Map(\"map_div\",{// 지도가 생성될 div\nwidth:\"100%\",// 지도의 넓이\nheight:\"400px\",// 지도의 높이\nzoom:14});map.addListener(\"click\",getLonlat);};_this._getSpot=function(){var lot=_this._getlotLat(lotList);var lat=_this._getlotLat(latList);var marker=new window.Tmapv2.Marker({position:new window.Tmapv2.LatLng(lat,lot),//Marker의 중심좌표 설정.\nicon:'http://tmapapis.sktelecom.com/upload/tmap/marker/pin_b_m_b.png',//Marker의 아이콘.\nmap:map//Marker가 표시될 Map 설정.\n});_this._getSubway({dSpotlat:lat,dSpotlot:lot});};_this._getSubway=function _callee2(_ref){var dSpotlat,dSpotlot,searchPoiInfo;return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dSpotlat=_ref.dSpotlat,dSpotlot=_ref.dSpotlot;_context2.next=3;return _regeneratorRuntime.awrap(_this._callSubwayCategoryApi({dSpotlat:dSpotlat,dSpotlot:dSpotlot,category:\"지하철;\"}));case 3:searchPoiInfo=_context2.sent;subways=searchPoiInfo.pois.poi;subways.map(function _callee(subway,index){return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(_this._callCafeCategoryApi({dSpotlat:parseFloat(subway.frontLat),dSpotlot:parseFloat(subway.frontLon),category:\"스터디카페;카페;\",i:index}));case 2:case\"end\":return _context.stop();}}});});case 6:case\"end\":return _context2.stop();}}});};_this._callSubwayCategoryApi=function(_ref2){var dSpotlat=_ref2.dSpotlat,dSpotlot=_ref2.dSpotlot,category=_ref2.category;var url=\"https://apis.openapi.sk.com/tmap/pois/search/around?version=1&\";var params={\"categories\":category,\"resCoordType\":\"WGS84GEO\",//응답 좌표계 유형\n\"reqCoordType\":\"WGS84GEO\",//요청 좌표계 유형\n\"centerLon\":dSpotlot,\"centerLat\":dSpotlat,\"appKey\":\"l7xxbfb4b13f846e43b8b0924bbda1166055\",\"count\":10,\"radius\":10};var esc=encodeURIComponent;var query=Object.keys(params).map(function(k){return esc(k)+'='+esc(params[k]);}).join('&');return fetch(url+query).then(function(response){return response.json();}).then(function(json){return json.searchPoiInfo;}).catch(function(err){return console.log(err);});};_this._callCafeCategoryApi=function _callee3(_ref3){var dSpotlat,dSpotlot,category,i,url,params,esc,query,response,responseOk,result,totalCount;return _regeneratorRuntime.async(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:dSpotlat=_ref3.dSpotlat,dSpotlot=_ref3.dSpotlot,category=_ref3.category,i=_ref3.i;url=\"https://apis.openapi.sk.com/tmap/pois/search/around?version=1&\";params={\"categories\":category,\"resCoordType\":\"WGS84GEO\",//응답 좌표계 유형\n\"reqCoordType\":\"WGS84GEO\",//요청 좌표계 유형\n\"centerLon\":dSpotlot,\"centerLat\":dSpotlat,\"appKey\":\"l7xxbfb4b13f846e43b8b0924bbda1166055\",\"count\":10,\"radius\":5};esc=encodeURIComponent;query=Object.keys(params).map(function(k){return esc(k)+'='+esc(params[k]);}).join('&');_context3.next=7;return _regeneratorRuntime.awrap(fetch(url+query).catch(function(err){return console.log(err);}));case 7:response=_context3.sent;responseOk=response&&response.ok;if(!responseOk){_context3.next=17;break;}_context3.next=12;return _regeneratorRuntime.awrap(response.json());case 12:result=_context3.sent;totalCount=result.searchPoiInfo.totalCount;totalList.push({totalCount:totalCount,index:i});subways[i].cafes=result.searchPoiInfo;if(subways.length==totalList.length){totalList.sort(function(a,b){// 오름차순\nreturn b[\"totalCount\"]-a[\"totalCount\"];});_this._createDSpot();}case 17:case\"end\":return _context3.stop();}}});};_this._getlotLat=function(list){var max=list[0];var min=list[0];list.map(function(num){if(max<num)max=num;if(min>num)min=num;});return min+(max-min)/2;};return _this;}_createClass(Map,[{key:\"componentDidMount\",value:function componentDidMount(){this._getMap();}},{key:\"_createDSpot\",value:function _createDSpot(){var index=totalList[0].index;var marker=new window.Tmapv2.Marker({position:new window.Tmapv2.LatLng(subways[index].frontLat,subways[index].frontLon),//Marker의 중심좌표 설정.\nicon:'http://tmapapis.sktelecom.com/upload/tmap/marker/pin_b_m_b.png',//Marker의 아이콘.\nmap:map//Marker가 표시될 Map 설정.\n});console.log(subways);console.log(totalList);}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(\"div\",null,React.createElement(\"div\",{id:\"map_div\"}),React.createElement(\"button\",{onClick:function onClick(){return _this2._getSpot();}},\"\\uC911\\uAC04\\uC9C0\\uC810\"));}}]);return Map;}(Component);function getLonlat(e){var lonlat=e.latLng;//Marker 객체 생성.\nvar marker=new window.Tmapv2.Marker({position:new window.Tmapv2.LatLng(lonlat.lat(),lonlat.lng()),//Marker의 중심좌표 설정.\nmap:map//Marker가 표시될 Map 설정.\n});markers.push(marker);latList.push(lonlat.lat());lotList.push(lonlat.lng());}export default Map;","map":{"version":3,"sources":["C:/Git/DSpot/src/Map.js"],"names":["React","Component","map","markers","lotList","latList","subways","totalList","totalIndex","Map","_getMap","window","Tmapv2","width","height","zoom","addListener","getLonlat","_getSpot","lot","_getlotLat","lat","marker","Marker","position","LatLng","icon","_getSubway","dSpotlat","dSpotlot","_callSubwayCategoryApi","category","searchPoiInfo","pois","poi","subway","index","_callCafeCategoryApi","parseFloat","frontLat","frontLon","i","url","params","esc","encodeURIComponent","query","Object","keys","k","join","fetch","then","response","json","catch","err","console","log","responseOk","ok","result","totalCount","push","cafes","length","sort","a","b","_createDSpot","list","max","min","num","e","lonlat","latLng","lng"],"mappings":"6lBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAkC,OAAlC,CAGA,GAAIC,CAAAA,GAAJ,CACA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACA,GAAMC,CAAAA,OAAO,CAAG,EAAhB,CACA,GAAMC,CAAAA,OAAO,CAAG,EAAhB,CACA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACA,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CACA,GAAIC,CAAAA,UAAU,CAAG,EAAjB,C,GACMC,CAAAA,G,mXAMFC,O,CAAW,UAAM,CACbR,GAAG,CAAG,GAAIS,CAAAA,MAAM,CAACC,MAAP,CAAcH,GAAlB,CAAsB,SAAtB,CAAiC,CAAE;AAC9CI,KAAK,CAAG,MADoC,CAC5B;AACPC,MAAM,CAAG,OAF0B,CAEjB;AAClBC,IAAI,CAAG,EAH4B,CAAjC,CAAN,CAOAb,GAAG,CAACc,WAAJ,CAAgB,OAAhB,CAAyBC,SAAzB,EACH,C,OAEDC,Q,CAAW,UAAM,CACb,GAAMC,CAAAA,GAAG,CAAG,MAAKC,UAAL,CAAgBhB,OAAhB,CAAZ,CACA,GAAMiB,CAAAA,GAAG,CAAG,MAAKD,UAAL,CAAgBf,OAAhB,CAAZ,CACA,GAAMiB,CAAAA,MAAM,CAAG,GAAIX,CAAAA,MAAM,CAACC,MAAP,CAAcW,MAAlB,CAAyB,CACpCC,QAAQ,CAAE,GAAIb,CAAAA,MAAM,CAACC,MAAP,CAAca,MAAlB,CAAyBJ,GAAzB,CAA6BF,GAA7B,CAD0B,CACS;AACtDO,IAAI,CAAE,gEAFuC,CAE2B;AACxExB,GAAG,CAAEA,GAAI;AAHoC,CAAzB,CAAf,CAMA,MAAKyB,UAAL,CAAgB,CAACC,QAAQ,CAAGP,GAAZ,CAAiBQ,QAAQ,CAAGV,GAA5B,CAAhB,EACH,C,OAEDQ,U,CAAa,iLAAQC,QAAR,MAAQA,QAAR,CAAkBC,QAAlB,MAAkBA,QAAlB,mDACmB,MAAKC,sBAAL,CAA4B,CAACF,QAAQ,CAARA,QAAD,CAAWC,QAAQ,CAARA,QAAX,CAAqBE,QAAQ,CAAG,MAAhC,CAA5B,CADnB,SACHC,aADG,gBAET1B,OAAO,CAAG0B,aAAa,CAACC,IAAd,CAAmBC,GAA7B,CACA5B,OAAO,CAACJ,GAAR,CAAY,iBAAMiC,MAAN,CAAcC,KAAd,oKACF,MAAKC,oBAAL,CAA0B,CAACT,QAAQ,CAAGU,UAAU,CAACH,MAAM,CAACI,QAAR,CAAtB,CAAyCV,QAAQ,CAAGS,UAAU,CAACH,MAAM,CAACK,QAAR,CAA9D,CAAiFT,QAAQ,CAAG,WAA5F,CAAyGU,CAAC,CAAGL,KAA7G,CAA1B,CADE,gDAAZ,EAHS,+C,OAQbN,sB,CAAyB,eAAoC,IAAlCF,CAAAA,QAAkC,OAAlCA,QAAkC,CAAxBC,QAAwB,OAAxBA,QAAwB,CAAdE,QAAc,OAAdA,QAAc,CACzD,GAAIW,CAAAA,GAAG,CAAG,gEAAV,CACA,GAAIC,CAAAA,MAAM,CAAG,CACT,aAAeZ,QADN,CAET,eAAiB,UAFR,CAEmB;AAC5B,eAAiB,UAHR,CAGmB;AAC5B,YAAcF,QAJL,CAKT,YAAcD,QALL,CAMT,SAAW,sCANF,CAOT,QAAU,EAPD,CAQT,SAAW,EARF,CAAb,CAUA,GAAIgB,CAAAA,GAAG,CAAGC,kBAAV,CACA,GAAIC,CAAAA,KAAK,CAAGC,MAAM,CAACC,IAAP,CAAYL,MAAZ,EACCzC,GADD,CACK,SAAA+C,CAAC,QAAIL,CAAAA,GAAG,CAACK,CAAD,CAAH,CAAS,GAAT,CAAeL,GAAG,CAACD,MAAM,CAACM,CAAD,CAAP,CAAtB,EADN,EAECC,IAFD,CAEM,GAFN,CAAZ,CAGA,MAAOC,CAAAA,KAAK,CAACT,GAAG,CAAEI,KAAN,CAAL,CACNM,IADM,CACD,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADP,EAENF,IAFM,CAED,SAAAE,IAAI,QAAIA,CAAAA,IAAI,CAACtB,aAAT,EAFH,EAGNuB,KAHM,CAGA,SAAAC,GAAG,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ,EAHH,CAAP,CAIH,C,OAEDnB,oB,CAAuB,0OAAQT,QAAR,OAAQA,QAAR,CAAkBC,QAAlB,OAAkBA,QAAlB,CAA4BE,QAA5B,OAA4BA,QAA5B,CAAsCU,CAAtC,OAAsCA,CAAtC,CACfC,GADe,CACT,gEADS,CAEfC,MAFe,CAEN,CACT,aAAeZ,QADN,CAET,eAAiB,UAFR,CAEmB;AAC5B,eAAiB,UAHR,CAGmB;AAC5B,YAAcF,QAJL,CAKT,YAAcD,QALL,CAMT,SAAW,sCANF,CAOT,QAAU,EAPD,CAQT,SAAW,CARF,CAFM,CAYfgB,GAZe,CAYTC,kBAZS,CAafC,KAbe,CAaPC,MAAM,CAACC,IAAP,CAAYL,MAAZ,EACCzC,GADD,CACK,SAAA+C,CAAC,QAAIL,CAAAA,GAAG,CAACK,CAAD,CAAH,CAAS,GAAT,CAAeL,GAAG,CAACD,MAAM,CAACM,CAAD,CAAP,CAAtB,EADN,EAECC,IAFD,CAEM,GAFN,CAbO,mDAgBIC,KAAK,CAACT,GAAG,CAAEI,KAAN,CAAL,CACtBS,KADsB,CAChB,SAAAC,GAAG,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ,EADa,CAhBJ,SAgBbH,QAhBa,gBAkBbM,UAlBa,CAkBAN,QAAQ,EAAIA,QAAQ,CAACO,EAlBrB,KAmBfD,UAnBe,8EAoBMN,QAAQ,CAACC,IAAT,EApBN,UAoBTO,MApBS,gBAqBTC,UArBS,CAqBID,MAAM,CAAC7B,aAAP,CAAqB8B,UArBzB,CAsBfvD,SAAS,CAACwD,IAAV,CAAgB,CAAED,UAAU,CAAGA,UAAf,CAA2B1B,KAAK,CAAGK,CAAnC,CAAhB,EACAnC,OAAO,CAACmC,CAAD,CAAP,CAAWuB,KAAX,CAAmBH,MAAM,CAAC7B,aAA1B,CACA,GAAI1B,OAAO,CAAC2D,MAAR,EAAkB1D,SAAS,CAAC0D,MAAhC,CAAwC,CACpC1D,SAAS,CAAC2D,IAAV,CAAe,SAASC,CAAT,CAAYC,CAAZ,CAAe,CAAE;AAC5B,MAAOA,CAAAA,CAAC,CAAC,YAAD,CAAD,CAAkBD,CAAC,CAAC,YAAD,CAA1B,CACH,CAFD,EAGA,MAAKE,YAAL,GACH,CA7Bc,gD,OA6CvBjD,U,CAAa,SAACkD,IAAD,CAAU,CACnB,GAAIC,CAAAA,GAAG,CAAGD,IAAI,CAAC,CAAD,CAAd,CACA,GAAIE,CAAAA,GAAG,CAAGF,IAAI,CAAC,CAAD,CAAd,CACAA,IAAI,CAACpE,GAAL,CAAS,SAAAuE,GAAG,CAAG,CACX,GAAIF,GAAG,CAAGE,GAAV,CACIF,GAAG,CAAGE,GAAN,CAEJ,GAAID,GAAG,CAAGC,GAAV,CACID,GAAG,CAAGC,GAAN,CACP,CAND,EAQA,MAAOD,CAAAA,GAAG,CAAG,CAACD,GAAG,CAAGC,GAAP,EAAc,CAA3B,CACH,C,4FAlHmB,CAChB,KAAK9D,OAAL,GACH,C,mDAwFc,CACX,GAAM0B,CAAAA,KAAK,CAAG7B,SAAS,CAAC,CAAD,CAAT,CAAa6B,KAA3B,CACA,GAAMd,CAAAA,MAAM,CAAG,GAAIX,CAAAA,MAAM,CAACC,MAAP,CAAcW,MAAlB,CAAyB,CACpCC,QAAQ,CAAE,GAAIb,CAAAA,MAAM,CAACC,MAAP,CAAca,MAAlB,CAAyBnB,OAAO,CAAC8B,KAAD,CAAP,CAAeG,QAAxC,CAAiDjC,OAAO,CAAC8B,KAAD,CAAP,CAAeI,QAAhE,CAD0B,CACiD;AAC9Fd,IAAI,CAAE,gEAFuC,CAE2B;AACxExB,GAAG,CAAEA,GAAI;AAHoC,CAAzB,CAAf,CAKAuD,OAAO,CAACC,GAAR,CAAYpD,OAAZ,EACAmD,OAAO,CAACC,GAAR,CAAYnD,SAAZ,EACH,C,uCAkBQ,iBACL,MACI,gCACI,2BAAK,EAAE,CAAC,SAAR,EADJ,CAEI,8BAAS,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACW,QAAL,EAAN,EAAlB,6BAFJ,CADJ,CAQH,C,iBAhIajB,S,EAmIlB,QAASgB,CAAAA,SAAT,CAAmByD,CAAnB,CAAuB,CACnB,GAAMC,CAAAA,MAAM,CAAGD,CAAC,CAACE,MAAjB,CACH;AACG,GAAMtD,CAAAA,MAAM,CAAG,GAAIX,CAAAA,MAAM,CAACC,MAAP,CAAcW,MAAlB,CAAyB,CACpCC,QAAQ,CAAE,GAAIb,CAAAA,MAAM,CAACC,MAAP,CAAca,MAAlB,CAAyBkD,MAAM,CAACtD,GAAP,EAAzB,CAAsCsD,MAAM,CAACE,GAAP,EAAtC,CAD0B,CAC2B;AAC/D3E,GAAG,CAAEA,GAAI;AAF2B,CAAzB,CAAf,CAKAC,OAAO,CAAC4D,IAAR,CAAazC,MAAb,EACAjB,OAAO,CAAC0D,IAAR,CAAaY,MAAM,CAACtD,GAAP,EAAb,EACAjB,OAAO,CAAC2D,IAAR,CAAaY,MAAM,CAACE,GAAP,EAAb,EACH,CAED,cAAepE,CAAAA,GAAf","sourcesContent":["import React, { Component }  from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nvar map;\r\nvar markers = [];\r\nconst lotList = [];\r\nconst latList = [];\r\nvar subways = [];\r\nvar totalList = [];\r\nvar totalIndex = [];\r\nclass Map extends Component {\r\n\r\n    componentDidMount() {\r\n        this._getMap();\r\n    }\r\n    \r\n    _getMap  = () => {\r\n        map = new window.Tmapv2.Map(\"map_div\", { // 지도가 생성될 div\r\n\t\t\twidth : \"100%\", // 지도의 넓이\r\n            height : \"400px\", // 지도의 높이\r\n            zoom : 14\r\n            \r\n        });\r\n\r\n        map.addListener(\"click\", getLonlat);\r\n    }\r\n\r\n    _getSpot = () => {\r\n        const lot = this._getlotLat(lotList);\r\n        const lat = this._getlotLat(latList);\r\n        const marker = new window.Tmapv2.Marker({\r\n            position: new window.Tmapv2.LatLng(lat,lot), //Marker의 중심좌표 설정.\r\n\t\t\ticon: 'http://tmapapis.sktelecom.com/upload/tmap/marker/pin_b_m_b.png', //Marker의 아이콘.\r\n\t\t\tmap: map //Marker가 표시될 Map 설정.\r\n        });\r\n\r\n        this._getSubway({dSpotlat : lat, dSpotlot : lot});   \r\n    }\r\n\r\n    _getSubway = async ({dSpotlat, dSpotlot}) => {\r\n        const searchPoiInfo = await this._callSubwayCategoryApi({dSpotlat, dSpotlot, category : \"지하철;\"});\r\n        subways = searchPoiInfo.pois.poi;\r\n        subways.map(async(subway, index) => {\r\n            await this._callCafeCategoryApi({dSpotlat : parseFloat(subway.frontLat), dSpotlot : parseFloat(subway.frontLon), category : \"스터디카페;카페;\", i : index});            \r\n        });\r\n    }\r\n\r\n    _callSubwayCategoryApi = ({dSpotlat, dSpotlot, category}) => {\r\n        var url = \"https://apis.openapi.sk.com/tmap/pois/search/around?version=1&\"\r\n        var params = {\r\n            \"categories\" : category,\r\n            \"resCoordType\" : \"WGS84GEO\",//응답 좌표계 유형\r\n            \"reqCoordType\" : \"WGS84GEO\",//요청 좌표계 유형\r\n            \"centerLon\" : dSpotlot,\r\n            \"centerLat\" : dSpotlat,\r\n            \"appKey\" : \"l7xxbfb4b13f846e43b8b0924bbda1166055\",\r\n            \"count\" : 10,\r\n            \"radius\" : 10\r\n        }\r\n        var esc = encodeURIComponent;\r\n        var query = Object.keys(params)\r\n                    .map(k => esc(k) + '=' + esc(params[k]))\r\n                    .join('&');             \r\n        return fetch(url +query)\r\n        .then(response => response.json())\r\n        .then(json => json.searchPoiInfo)\r\n        .catch(err => console.log(err));\r\n    }\r\n    \r\n    _callCafeCategoryApi = async ({dSpotlat, dSpotlot, category, i}) => {\r\n        var url = \"https://apis.openapi.sk.com/tmap/pois/search/around?version=1&\"\r\n        var params = {\r\n            \"categories\" : category,\r\n            \"resCoordType\" : \"WGS84GEO\",//응답 좌표계 유형\r\n            \"reqCoordType\" : \"WGS84GEO\",//요청 좌표계 유형\r\n            \"centerLon\" : dSpotlot,\r\n            \"centerLat\" : dSpotlat,\r\n            \"appKey\" : \"l7xxbfb4b13f846e43b8b0924bbda1166055\",\r\n            \"count\" : 10,\r\n            \"radius\" : 5\r\n        }\r\n        var esc = encodeURIComponent;\r\n        var query = Object.keys(params)\r\n                    .map(k => esc(k) + '=' + esc(params[k]))\r\n                    .join('&');             \r\n        const response = await fetch(url +query)\r\n        .catch(err => console.log(err));\r\n        const responseOk = response && response.ok; \r\n        if (responseOk) {\r\n            const result = await response.json();\r\n            const totalCount = result.searchPoiInfo.totalCount;\r\n            totalList.push( { totalCount : totalCount, index : i} );\r\n            subways[i].cafes = result.searchPoiInfo\r\n            if (subways.length == totalList.length) {\r\n                totalList.sort(function(a, b) { // 오름차순\r\n                    return b[\"totalCount\"] - a[\"totalCount\"];\r\n                });\r\n                this._createDSpot();\r\n            }\r\n        }\r\n    }\r\n\r\n    _createDSpot() {\r\n        const index = totalList[0].index\r\n        const marker = new window.Tmapv2.Marker({\r\n            position: new window.Tmapv2.LatLng(subways[index].frontLat,subways[index].frontLon), //Marker의 중심좌표 설정.\r\n\t\t\ticon: 'http://tmapapis.sktelecom.com/upload/tmap/marker/pin_b_m_b.png', //Marker의 아이콘.\r\n\t\t\tmap: map //Marker가 표시될 Map 설정.\r\n        }); \r\n        console.log(subways);\r\n        console.log(totalList);\r\n    }\r\n     \r\n\r\n    _getlotLat = (list) => {\r\n        var max = list[0];\r\n        var min = list[0];\r\n        list.map(num=> {\r\n            if (max < num)\r\n                max = num;\r\n            \r\n            if (min > num)\r\n                min = num;\r\n        })\r\n\r\n        return min +((max - min) / 2)\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"map_div\"></div>\r\n                <button  onClick={() => this._getSpot()}>중간지점</button>\r\n            </div>\r\n        \r\n        \r\n        )\r\n    };\r\n}\r\n\r\nfunction getLonlat(e)  {\r\n    const lonlat = e.latLng;\r\n\t//Marker 객체 생성.\r\n    const marker = new window.Tmapv2.Marker({\r\n        position: new window.Tmapv2.LatLng(lonlat.lat(),lonlat.lng()), //Marker의 중심좌표 설정.\r\n        map: map //Marker가 표시될 Map 설정.\r\n\r\n    });\r\n    markers.push(marker);\r\n    latList.push(lonlat.lat());\r\n    lotList.push(lonlat.lng());\r\n}\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}